--- libsrvrmgrd-osx-0.6.5/check_osx_server	2012-11-07 11:33:51.000000000 +0000
+++ check_osx_server	2013-01-15 17:41:39.017340885 +0000
@@ -373,10 +373,16 @@
         unknownCount += 1
     return serviceStatus, criticalCount, warningCount, unknownCount
 
+def convertFromPercentToBytes(percLevel, fullSize):
+    return int(fullSize)*float(percLevel)/100
 
 def getServiceThreshold(sensorReading, warnLevel=80, critLevel=90):
     # Convert to INT : We may have had comma seperated list of 2 thresholds
     # Debug Output
+    sensorReading = int(sensorReading)
+    warnLevel = int(warnLevel)
+    critLevel = int(critLevel)
+
     if debugMode:
         serverMessage = "#### getServiceThreshold####\nsensorReading: %s\nwarnLevel: %s\ncritLevel: %s" % (sensorReading, warnLevel, critLevel)
         logMessage(serverMessage, serverAddress, serverPort)
@@ -535,24 +541,49 @@
 def humaniseBytes(numberInBytes):
     numberInBytes = str(numberInBytes)
     if len(numberInBytes) > 15:
-        humanisedNumber = int(int(numberInBytes)/(byteBase**5))
+        #humanisedNumber = int(int(numberInBytes)/(byteBase**5))
+        humanisedNumber = convertFromBytes(numberInBytes,"PB")
         humanisedNumber = "%sPB" % (humanisedNumber)
-    if len(numberInBytes) > 12:
-        humanisedNumber = int(int(numberInBytes)/(byteBase**4))
+    elif len(numberInBytes) > 12:
+        #humanisedNumber = int(int(numberInBytes)/(byteBase**4))
+        humanisedNumber = convertFromBytes(numberInBytes,"TB")
         humanisedNumber = "%sTB" % (humanisedNumber)
     elif len(numberInBytes) > 9:
-        humanisedNumber = int(int(numberInBytes)/(byteBase**3))
+        #humanisedNumber = int(int(numberInBytes)/(byteBase**3))
+        humanisedNumber = convertFromBytes(numberInBytes,"GB")
         humanisedNumber = "%sGB" % (humanisedNumber)
     elif len(numberInBytes) > 6:
-        humanisedNumber = int(int(numberInBytes)/(byteBase**2))
+        #humanisedNumber = int(int(numberInBytes)/(byteBase**2))
+        humanisedNumber = convertFromBytes(numberInBytes,"MB")
         humanisedNumber = "%sMB" % (humanisedNumber)
     elif len(numberInBytes) > 3:
-        humanisedNumber = int(int(numberInBytes)/(byteBase))
+        #humanisedNumber = int(int(numberInBytes)/(byteBase))
+        humanisedNumber = convertFromBytes(numberInBytes,"kB")
         humanisedNumber = "%skB" % (humanisedNumber)
     else:
         humanisedNumber = "%sB" % (numberInBytes)
     return humanisedNumber
 
+def convertFromBytes(numberInBytes, UOM="MB"):
+  # coverts Byte units another unit, without trailing UOM
+    # by default, if not UOM specified, it converts in MegaBytes
+    convertRules = {"PB" : 5, "TB" : 4, "GB" : 3, "MB" : 2, "kB" : 1}
+    base = byteBase**convertRules[UOM]
+    
+    #if UOM == "PB":
+    #  base = byteBase**5
+    #elif UOM == "TB":
+    #  base = byteBase**4
+    #elif UOM == "GB":
+    #  base = byteBase**3
+    #elif UOM == "MB":
+    #  base = byteBase**2
+    #elif UOM == "kB":
+    #  base = byteBase
+
+    convertedBytes = int(int(numberInBytes)/(base))
+
+    return convertedBytes
 
 # Set a Default State - Stops bug at end if we never set it... - UGLY!
 serviceStatus = ""
@@ -605,6 +636,7 @@
             perDiskName = sys.argv[6 + debugMode]
     else:
         perDiskOffset = 0
+    # fetching the Warning and Critical level parameters
     if len(sys.argv) > (6 + debugMode + perDiskOffset):
         # Must Have Both Warn And Crit Set
         if len(sys.argv) == (8 + debugMode + perDiskOffset):
@@ -643,8 +675,16 @@
                 if perDiskName != hddName:
                     continue
             usedBytes = hddInfo['totalBytes'] - hddInfo['freeBytes']
-            perfData += "totalBytes.%s=%s;;;;; freeBytes.%s=%s;;;;; usedBytes.%s=%s;;;;; " % (hddName.replace('"', ''), hddInfo['totalBytes'], hddName.replace('"', ''), hddInfo['freeBytes'], hddName.replace('"', ''), usedBytes)
-            hddUsagePercentage = int((float(usedBytes)/float(hddInfo['totalBytes'])) * 100)
+            
+            warningThreshold = convertFromPercentToBytes(warnLevel,hddInfo['totalBytes'])
+            criticalThreshold = convertFromPercentToBytes(critLevel,hddInfo['totalBytes'])
+            
+            #perfData for hddUsage and hddUsageDrive
+            #perfData for hddUsage and hddUsageDrive
+            perfData += "'%s'=%s%s;%s;%s;%s;%s" % (hddName.replace('"', ''), convertFromBytes(usedBytes,"MB"),"MB",convertFromBytes(warningThreshold,"MB"),convertFromBytes(criticalThreshold,"MB"),0,convertFromBytes(hddInfo['totalBytes'],"MB"))
+	    #perfData += "totalBytes.%s=%s;;;;; freeBytes.%s=%s;;;;; usedBytes.%s=%s;;;;; " % (hddName.replace('"', ''), hddInfo['totalBytes'], hddName.replace('"', ''), hddInfo['freeBytes'], hddName.replace('"', ''), usedBytes)
+            
+	    hddUsagePercentage = int((float(usedBytes)/float(hddInfo['totalBytes'])) * 100)
             # If Thresholds Are Set else use defaults of 80 & 90
             hddStatus += "'%s':%s%% " % (hddName, hddUsagePercentage)
             if (warnLevel and critLevel) and checkService != 'sysUsage':
